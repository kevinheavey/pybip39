from typing import Literal

_Language = Literal["en", "zh-hans", "zh-hant", "fr", "it", "ja", "ko", "es"]

class Mnemonic:
    def __init__(self, word_count: int = 12, language: _Language = "en") -> None: ...
    @staticmethod
    def from_entropy(entropy: bytes, language: _Language = "en") -> Mnemonic: ...
    @staticmethod
    def from_phrase(phrase: str, language: _Language = "en") -> Mnemonic: ...
    @staticmethod
    def validate(phrase: str, language: _Language = "en") -> None: ...
    @property
    def entropy(self) -> bytes: ...
    @property
    def phrase(self) -> str: ...
    def hex(self) -> str: ...
    def __str__(self) -> str: ...
    def __bytes__(self) -> bytes: ...

class Seed:
    def __init__(self, mnemonic: Mnemonic, password: str) -> None: ...
    def __bytes__(self) -> bytes: ...
    def hex(self) -> str: ...
